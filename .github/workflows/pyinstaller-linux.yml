name: Build and Release

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  deploy:
    strategy:
      matrix:
        platform: [linux-arm64]  # Pour Raspberry Pi (64-bit)
    runs-on: ubuntu-latest
    env:
      script: script
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        shell: bash
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest tag: $latest_tag"

          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          new_patch=$((patch + 1))
          new_tag="v$major.$minor.$new_patch"

          echo "New tag: $new_tag"
          echo "tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Check Tag Exists
        uses: mukunku/tag-exists-action@v1.0.0
        id: checkTag
        with: 
          tag: ${{ steps.get_tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail If Tag Exists
        if: ${{ steps.checkTag.outputs.exists == 'true' }}
        run: exit 1

      - name: Set Up Python 3.10
        uses: actions/setup-python@v5.6.0
        with:
          python-version: 3.10  # Utilisez une version compatible avec ARM

      - name: Install QEMU (pour cross-compilation)
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu qemu-user-static binfmt-support

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Create Executable for ARM
        run: |
          # DÃ©termine l'architecture cible
          if [ "${{ matrix.platform }}" = "linux-arm64" ]; then
            arch="aarch64"
          else
            arch="armv7l"
          fi
          
          # Utilise Docker pour cross-compiler
          docker run --rm -v $(pwd):/src -w /src python:3.10-slim \
            /bin/bash -c "
            apt-get update && apt-get install -y gcc python3-dev && \
            pip install pyinstaller && \
            pip install -r requirements.txt && \
            pyinstaller --onefile --noconsole main.py --name=main_${{ matrix.platform }} && \
            chmod -R 777 dist
            "

      - name: Publish a New Release
        id: release
        uses: ncipollo/release-action@v1
        with:
          artifacts: dist/main_${{ matrix.platform }}
          tag: ${{ steps.get_tag.outputs.tag }}
          token: ${{ secrets.GITHUB_TOKEN }}